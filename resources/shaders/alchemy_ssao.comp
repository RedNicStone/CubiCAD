#version 450

layout (local_size_x = 16, local_size_y = 16) in;

const int SAMPLE_COUNT = 64;
const float SAMPLE_RADIUS = 0.05f;
const float depth_bias = 0.001f;
const float zero_guard = 0.001f;

layout(set = 0, binding = 0) uniform SceneInfo {
    mat4 view;// view matrix
    mat4 proj;// projection matrix

    uint nFrame;// frame ID
    uint frameTime;// frame time in ns
    uint selectedID;// currently selected object
    uint hoveredID;// currently hovered object
} scene_info;

layout(set = 1, binding = 0) uniform PassInfo {
    uvec2 imageSize;
    float tanFOV;
    vec3 samples[SAMPLE_COUNT];
} passInfo;

layout(set = 1, binding = 1) uniform sampler samp;
layout(set = 1, binding = 2, r16) uniform image2D shading_texOut;
layout(set = 1, binding = 3) uniform texture2D geometry_normal;
layout(set = 1, binding = 4) uniform texture2D geometry_pos;
layout(set = 1, binding = 5) uniform texture2D tex_noise;

//alogrithm from https://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection
vec2 azimuthalEAEncode(vec3 n) {
    float p = sqrt(n.z*8+8);
    return vec2(n.xy/p + 0.5);
}
vec3 azimuthalEADecode(vec2 enc) {
    vec2 fenc = enc*4-2;
    float f = dot(fenc,fenc);
    float g = sqrt(1-f/4);
    vec3 n;
    n.xy = fenc*g;
    n.z = 1-f/2;
    return n;
}

void main() {
    const uint SAMPLE_OFFSET = (gl_GlobalInvocationID.x * gl_GlobalInvocationID.y) % (SAMPLE_COUNT / 2);
    const uvec2 pixel_pos = gl_GlobalInvocationID.xy;

    const vec2 frag_uv = vec2(pixel_pos) / passInfo.imageSize;
    const vec3 frag_normal = normalize(azimuthalEADecode(texture(sampler2D(geometry_normal, samp), frag_uv).xy));
    const vec3 frag_pos = texture(sampler2D(geometry_pos, samp), frag_uv).xyz;
    const vec3 random_vec = vec3(texture(sampler2D(tex_noise, samp), frag_uv * passInfo.imageSize / vec2(4.0f)).xy, 0.0);

    const vec3 random_tangent = normalize(random_vec - frag_normal * dot(random_vec, frag_normal));
    const vec3 random_bitangent = cross(frag_normal, random_tangent);
    const mat3 TBN = mat3(random_tangent, random_bitangent, frag_normal);

    float occlusion = 0.0f;
    for(int i = 0; i < SAMPLE_COUNT; ++i)
    {
        // get sample position
        vec3 sample_pos = TBN * passInfo.samples[i]; // from tangent to view-space
        sample_pos = frag_pos + sample_pos * SAMPLE_RADIUS;

        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(sample_pos, 1.0);
        offset = scene_info.proj * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0

        // get sample depth
        float sample_depth = texture(sampler2D(geometry_pos, samp), offset.xy).z; // get depth value of kernel sample

        // range check & accumulate
        float range_check = smoothstep(0.0, 1.0, SAMPLE_RADIUS / abs(frag_pos.z - sample_depth));
        occlusion += (sample_depth >= sample_pos.z + depth_bias ? 1.0 : 0.0) * range_check;
    }
    occlusion = 1.0 - (occlusion / SAMPLE_COUNT);

    imageStore(shading_texOut, ivec2(pixel_pos), vec4(occlusion));
}

//const float ss_radius = min(WORLD_RADIUS / (passInfo.tanFOV * 2.0f * frag_pos.z), 0.2f);
//const float true_world_radius = ss_radius * 2.0f * frag_pos.z * passInfo.tanFOV;
//const float true_world_radius_2 = true_world_radius * true_world_radius;
//const vec2 true_ss_radius = vec2(ss_radius * passInfo.imageAspect, ss_radius);
//
//const vec4 rotationVector = passInfo.rotationMatrix[0] * 2.0f - 1.0f;
//const mat2 rotationMatrix = mat2(rotationVector);
//
//const float sample_distance[SAMPLE_COUNT / 2] = {
//passInfo.samples[SAMPLE_OFFSET].x,
//passInfo.samples[SAMPLE_OFFSET].y,
//passInfo.samples[SAMPLE_OFFSET].z,
//passInfo.samples[SAMPLE_OFFSET].w,
//-passInfo.samples[SAMPLE_OFFSET + 1].x,
//-passInfo.samples[SAMPLE_OFFSET + 1].y,
//-passInfo.samples[SAMPLE_OFFSET + 1].z,
//-passInfo.samples[SAMPLE_OFFSET + 1].w,
//};
//
//float occlusion = 0.0f;
//for(uint sample_index = 0; sample_index < SAMPLE_COUNT / 2; ++sample_index)
//{
//    const vec2 sample_uv = frag_uv + rotationMatrix * vec2(sample_distance[sample_index], 0) * 0.002;
//    const vec3 sample_pos = texture(sampler2D(geometry_pos, samp), sample_uv).xyz;
//
//    const vec3 sample_ray = sample_pos - frag_pos;
//    const float sample_ray_dis_2 = dot(sample_ray, sample_ray);
//    //occlusion += (false && (sample_ray_dis_2 > true_world_radius_2) ? 0.0f :
//    //    max(0.0f, dot(sample_ray, frag_normal) + frag_pos.z * depth_bias * 0) / (sample_ray_dis_2 + zero_guard));
//
//    occlusion += (frag_pos.z >= sample_pos.z + depth_bias ? 1.0 : 0.0);
//}
//occlusion = max(0.0f, 1.0f - (occlusion / SAMPLE_COUNT));
